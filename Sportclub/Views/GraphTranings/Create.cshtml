@model Sportclub.ViewModel.GraphTraningVM

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript">
    $(document).ready(function () {
        //4)-----выставить selects в "режим ожидания" ------------
        $('select[name=CoacheId]').val(999)
        $('select[name=SpecializationId]').val(888)
        $('#GymsId').val(1001)
    })
    $(function () {
        //1а) - взаимодейств. select Coache - select Specializ м/у собой
        $('#coaches').change(function (e) {
            var id = $(this).val();
            var listIdSpec = []
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetSpecialists")/' + id,
                success: function (data) {
                    $('#specializations').replaceWith(data); // в PartialView "_GetSpecialization"
                    $('#specializations').addClass('form-control')
                    $('#specializations').children().each(function (i, item) {
                        listIdSpec.push($(item).val()); //загруз. список специальностей выбранн. тренера
                    })
                },
                complete: function () {
                    $.ajax({    //1b)дополн. подобрать соотв. залы
                        type: "GET",
                        url: '@Url.Action("GetGyms")/',
                        data: { listIdSpec: JSON.stringify(listIdSpec) },
                        success: function (data) {
                            $('#GymsId').replaceWith(data);
                            $('#GymsId').addClass('form-control');
                            setTime();
                            $('#GymsId').change(function (ev) {
                                console.log("gym change!")
                                setTime();
                                $('#DayOfWeek').change(function (e) {   //при изм. дня недели
                                    console.log($(ev.target).val())
                                    setTime();
                                });
                            })
                        },
                        error: function (xhr, status) {
                            alert(status)
                        }
                    });
                },
                error: function (xhr, status) {
                    alert(status)
                }
            })
            //1c) при изм. специальн. (после изм. списка тренров)- изм. на соотв. тренеров
            setCoaches();
        });
        //1d) то же (независимо)
        setCoaches();
        //2a)------выставл. возм-го. времени занятий----------------
        $('#GymsId').change(function (ev) {
            console.log("gym - independ change!")
            setTime();
            $('#DayOfWeek').change(function (e) {   //при изм. дня недели
                console.log("gym - ev.target: " +$(ev.target).val())
                setTime();
            });
        })
        $('#DayOfWeek').change(function (e) {   //при изм. дня недели
            console.log("dayOfWeek - e.target: "+$(e.target).val())
            setTime();
        });
        //2b)------коррект. времени оконч. при выборе времени начала------
        $('#selectTimeBegin').change(function (e) {
            var timeBegin = $(this).val();
            console.log(timeBegin)
            var arrTimes = timeBegin.split(':');
            var hourEnd = +arrTimes[0] + 1;
            var minEnd = +arrTimes[1] + 30;
            $('#selectTimeEnd').attr("disabled", false);
            $('#selectTimeEnd').val(hourEnd + ":" + minEnd + ":" + arrTimes[2])
            $('#selectTimeEnd').attr("disabled", true);
        });

        //3 --------- submit--------------------------------------------
        var myForm = document.forms[0];
        $('input[type=submit]').click(function (e) {
            $(this).attr('disabled', true);
            $(myForm).triggerHandler('submit');
        });
        $(myForm).submit(function(e) {
            event.preventDefault();
            var specId = $('#specializations').val();
            var gymsId = $('#GymsId').val();
            var timeBegin = $('#selectTimeBegin').val();
            var timeEnd = $('#selectTimeEnd').val();
            var formData = new FormData(this);
            formData.append("specId", specId);
            formData.append("GymsId", gymsId);
            formData.append("TimeBegin", timeBegin);
            formData.append("TimeEnd", timeEnd);
            //for (key of formData.keys())
            //    console.log(`${key}: ${formData.get(key)}`);

            $.ajax({
                method: "POST",
                processData: false,
                contentType: false,
                data: formData,
                url: "/GraphTranings/Create",
                success: function (data) {
                    alert(data);
                    $(location).attr('href', '/GraphTranings/Index')
                },
                error: function (xhr, status) {
                    alert(status);
                }
            })
        });

 //----------------service func ---------------------------
        //----------SetTime -> GetTime------------------------
        function setTime() {
            var intDay = $('#DayOfWeek').val();
            var gymId = $('#GymsId').val();
            console.log("intro SetTime gymId: " + gymId)
            $.ajax({
                method: "GET",
                data: { intDay: intDay, gymId: gymId },
                url: "GetTime",
                success: function (data) {
                    var res = JSON.parse(data);
                    if (res != null && res != undefined && res != "") {
                        $(res).each(function (ind, item) {
                            var timeBeginFull = res[ind]["Item1"];
                            var timeEndFull = res[ind]["Item2"];
                            var timeBegin = timeBeginFull.split('T')[1];
                            var timeEnd = timeEndFull.split('T')[1];
                            $('#selectTimeBegin').html();
                            $('#selectTimeBegin').append('<option value=' + timeBegin + '>' + timeBegin + '</option>')
                            $('#selectTimeEnd').html();
                            $('#selectTimeEnd').append('<option value=' + timeEnd + '>' + timeEnd + '</option>')
                            $('#selectTimeEnd').attr("disabled", true);
                        })
                    }
                    else {
                        $('#selectTimeBegin').html();
                        $('#selectTimeBegin').append('<option value=' + "09:00" + '>' + "09:00" + '</option>');
                        $('#selectTimeEnd').html();
                        $('#selectTimeEnd').append('<option value=' + "10:30" + '>' + "10:30" + '</option>');
                        $('#selectTimeEnd').attr("disabled", true);
                    }
                    $('[data-toggle="tooltip"]').tooltip('disable');
                },
                error: function (xhr, status) {
                    alert(status)
                }
            })
        };
        //-----------SetCoache -> GgetCoache----------------
        function setCoaches() {
            $('#specializations').change(function (e) {
            var id = $(this).val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCoaches")/' + id,
                success: function (data) {
                    $('#coaches').replaceWith(data);
                    $('#coaches').addClass('form-control');
                },
                error: function (xhr, status) {
                    alert(status)
                }
            })
        });
        }
        //-------mouse over on timeBeginEnd------------
        //function mouseOverOnTime() {
        //}
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
    })
</script>
<h2>Create</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Graphic Traning</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div style="display:flex">
            <div class="form-group col-md-5">
                @Html.LabelFor(model => model.CoacheId, "CoacheId", htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownList("CoacheId", null, htmlAttributes: new { @class = "form-control", id = "coaches", @Value = 999 })
                    @Html.ValidationMessageFor(model => model.CoacheId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-5">
                @Html.LabelFor(model => model.CoacheId, "Specialist", htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownList("SpecializationId", null, htmlAttributes: new { @class = "form-control", id = "specializations", @Value = 888 })
                    @Html.ValidationMessageFor(model => model.CoacheId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DayOfWeek, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.DayOfWeek, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DayOfWeek, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TimeBegin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.TimeBegin, new { htmlAttributes = new { @class = "form-control", @placeholder = "09:00" } })*@
                <select class="form-control mySelectTime" id="selectTimeBegin" data-toggle="tooltip" title="сначала выберите зал и день"></select>
                @Html.ValidationMessageFor(model => model.TimeBegin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TimeEnd, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.TimeEnd, new { htmlAttributes = new { @class = "form-control", @placeholder = "10:30" } })*@
                <select class="form-control mySelectTime" id="selectTimeEnd" data-toggle="tooltip" title="будет установлено автоматически после TimeBegin"></select>
                @Html.ValidationMessageFor(model => model.TimeEnd, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.GymsId, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10">
                @Html.DropDownListFor(model => model.GymsId, ViewBag.GymList as SelectList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GymsId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
